'use strict';

var _webpackSharedConfig = require('./webpack.shared.config.js');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _cleanWebpackPlugin = require('clean-webpack-plugin');

var _cleanWebpackPlugin2 = _interopRequireDefault(_cleanWebpackPlugin);

var _flowBabelWebpackPlugin = require('flow-babel-webpack-plugin');

var _flowBabelWebpackPlugin2 = _interopRequireDefault(_flowBabelWebpackPlugin);

var _dotenvWebpack = require('dotenv-webpack');

var _dotenvWebpack2 = _interopRequireDefault(_dotenvWebpack);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  mode: 'development',
  entry: ['babel-polyfill', 'whatwg-fetch', 'react-hot-loader/patch', './src/index.js'],
  module: {
    // This is added to avoid warnings generated by some of the dev tools
    // The prod Webpack config should compile fine without it
    exprContextCritical: false,
    rules: _webpackSharedConfig.rules
  },
  devtool: 'inline-source-map',
  devServer: {
    contentBase: _path2.default.resolve(__dirname, 'dist'),
    hot: true
  },
  plugins: [new _dotenvWebpack2.default({
    path: './.env'
  }), new _cleanWebpackPlugin2.default(['dist']), new _htmlWebpackPlugin2.default({
    template: './index.html'
  }), new _flowBabelWebpackPlugin2.default(), new _webpack2.default.LoaderOptionsPlugin({ options: {} })],
  output: _webpackSharedConfig.output,
  resolve: {
    alias: _webpackSharedConfig.alias,
    extensions: _webpackSharedConfig.extentions
  },
  node: {
    dns: 'mock',
    net: 'mock'
  },
  externals: {
    winston: 'winston'
  }
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }
}();

;